services:
  django:
    build:
      context: .
      dockerfile: Dockerfile

    ports:
      - 8000:8000
    depends_on:
      - postgres
    command: bash -c "python manage.py install && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    # environment:
    #   - DB_SERVICE_HOST=db
    networks:
      - djangonetwork



  postgres:
    image: postgres:16-alpine3.20
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always
    hostname: postgres
    # volumes:
    #   - data:/var/lib/postgresql/data
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    environment:
      # - "POSTGRES_HOST_AUTH_METHOD=trust"
      POSTGRES_PASSWORD: hestia
      POSTGRES_USER: hestiau
      POSTGRES_DB: hestia

    ports:
      - 5432:5432
    networks:
      - djangonetwork

  dragonfly:
    image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    # For better performance, consider `host` mode instead `port` to avoid docker NAT.
    # `host` mode is NOT currently supported in Swarm Mode.
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
    # network_mode: "host"
    volumes:
      - dragonflydata:/data

    networks:
      - djangonetwork

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - djangonetwork
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - djangonetwork
    depends_on:
      - postgres

networks:
  djangonetwork:
    driver: bridge

volumes:
  postgres_data:
  dragonflydata:
